# @package _global_

# to execute this experiment run:
# python train.py experiment=multimodal/test_multimodal

defaults:
  - override /datamodule: librispeech.yaml
  - override /model: flat_perceiver.yaml
  - override /callbacks: 
      - default.yaml
      - metrics.yaml
      - artifacts.yaml
      # - media.yaml
  - override /logger: wandb.yaml
  - override /trainer: default.yaml

# all parameters below will be merged with parameters from default configurations set above
# this allows you to overwrite only specified parameters

# name of the run determines folder name in logs
name: "flat_perceiver_librispeech"

data_dir: E:/Datasets

seed: 13579

test: False

trainer:
  gpus: 1
  accumulate_grad_batches: 8
  min_epochs: 1
  max_epochs: 1024
  limit_val_batches: 0 # disable validation
  log_every_n_steps: 1
  num_sanity_val_steps: 10
  # overfit_batches: 16

model:
  switch_student_teacher_per_epoch: True
  scheduler_monitor: 'train/recall@5_on_step' #! set to a metric if using ReduceLROnPlateau, else keep as 'train/total_loss'
  scheduler_interval: step #! set to 'step' to use OneCycleLR, otherwise 'epoch' for CosineAnnealingWarmRestarts
  optimizer:
    lr: 0.01
  model:
    d_model: 504
    num_latents: 384
    d_latents: 128
    num_self_attends_per_block: 12
    cross_attention_widening_factor: 4
    self_attention_widening_factor: 4
    use_projection_head: True
    use_simsiam_projector: False
  criterion:
    aggregation: "mean"
    latent_loss_scale: 1
    use_latent_loss: True
    use_align_loss: True
  scheduler:
    steps_per_epoch: 21 # because of gradient accumulation
    pct_start: 0.375
    epochs: 256

datamodule:
  split: "validation"
  train_batch_size: 16
  val_batch_size: 16
  test_batch_size: 16

logger:
  wandb:
    project: "multimodal-self-distillation"
    prefix: "flat_librispeech"
    tags: ["multimodal", "librispeech", "flat", "${name}", "OneCycleLR"]
    group: "flat_librispeech"

callbacks:
  model_checkpoint:
    monitor: "train/recall@5_on_step"
    mode: "max"
  log_metrics:
    top_k: [1, 5, 100]
    logging_interval: 1
    on_step: False
    on_epoch: True
  watch_model:
    log: "all"
    log_freq: 1
  # log_media:
  #   log_every_n_steps: 10

